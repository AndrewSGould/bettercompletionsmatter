// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TavisApi.Context;

#nullable disable

namespace TavisApi.Migrations
{
    [DbContext(typeof(TavisContext))]
    [Migration("20240101232126_YearsParticipated")]
    partial class YearsParticipated
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Tavis.Models.BcmCompletionHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("GameId")
                        .HasColumnType("integer");

                    b.Property<double?>("SiteRatio")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("BcmCompletionHistory");
                });

            modelBuilder.Entity("Tavis.Models.BcmPlayer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("LastSync")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TrueAchievementId")
                        .HasColumnType("integer");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("BcmPlayers");
                });

            modelBuilder.Entity("Tavis.Models.BcmPlayerCompletionHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long?>("BcmPlayerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CompletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("GameId")
                        .HasColumnType("integer");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BcmPlayerId");

                    b.HasIndex("GameId");

                    b.ToTable("BcmPlayerCompletionHistory");
                });

            modelBuilder.Entity("Tavis.Models.BcmPlayerGame", b =>
                {
                    b.Property<int?>("GameId")
                        .HasColumnType("integer");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int?>("AchievementCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Gamerscore")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastUnlock")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("NotForContests")
                        .HasColumnType("boolean");

                    b.Property<int?>("Ownership")
                        .HasColumnType("integer");

                    b.Property<int?>("Platform")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("TrueAchievement")
                        .HasColumnType("integer");

                    b.HasKey("GameId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("GameId", "PlayerId")
                        .IsUnique();

                    b.ToTable("BcmPlayerGames");
                });

            modelBuilder.Entity("Tavis.Models.BcmRgsc", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BcmPlayerId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Challenge")
                        .HasColumnType("integer");

                    b.Property<int?>("GameId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Issued")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PoolSize")
                        .HasColumnType("integer");

                    b.Property<int?>("PreviousGameId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("RerollDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Rerolled")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("BcmPlayerId");

                    b.ToTable("BcmRgsc");
                });

            modelBuilder.Entity("Tavis.Models.BcmStat", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double?>("AveragePoints")
                        .HasColumnType("double precision");

                    b.Property<double?>("AverageRatio")
                        .HasColumnType("double precision");

                    b.Property<double?>("AverageTimeEstimate")
                        .HasColumnType("double precision");

                    b.Property<double?>("BasePoints")
                        .HasColumnType("double precision");

                    b.Property<double?>("BonusPoints")
                        .HasColumnType("double precision");

                    b.Property<int?>("Completions")
                        .HasColumnType("integer");

                    b.Property<double?>("HighestRatio")
                        .HasColumnType("double precision");

                    b.Property<double?>("HighestTimeEstimate")
                        .HasColumnType("double precision");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Rank")
                        .HasColumnType("integer");

                    b.Property<int?>("RankMovement")
                        .HasColumnType("integer");

                    b.Property<double?>("TotalPoints")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("BcmStats");
                });

            modelBuilder.Entity("Tavis.Models.DiscordLogin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("DiscordId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("TokenType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("DiscordLogins");
                });

            modelBuilder.Entity("Tavis.Models.FeatureList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("BackwardsCompat")
                        .HasColumnType("boolean");

                    b.Property<bool>("CloudGaming")
                        .HasColumnType("boolean");

                    b.Property<bool>("Crossplay")
                        .HasColumnType("boolean");

                    b.Property<bool>("EaPlay")
                        .HasColumnType("boolean");

                    b.Property<int?>("FeatureListOfGameId")
                        .HasColumnType("integer");

                    b.Property<bool>("GamePass")
                        .HasColumnType("boolean");

                    b.Property<bool>("GamePreview")
                        .HasColumnType("boolean");

                    b.Property<bool>("GamesWithGold")
                        .HasColumnType("boolean");

                    b.Property<bool>("Hdr")
                        .HasColumnType("boolean");

                    b.Property<bool>("IdAtXbox")
                        .HasColumnType("boolean");

                    b.Property<bool>("NotBackwardsCompat")
                        .HasColumnType("boolean");

                    b.Property<bool>("OnSteam")
                        .HasColumnType("boolean");

                    b.Property<bool>("OneXEnhanced")
                        .HasColumnType("boolean");

                    b.Property<bool>("OptimizedForSeries")
                        .HasColumnType("boolean");

                    b.Property<bool>("PcGamePass")
                        .HasColumnType("boolean");

                    b.Property<bool>("PlayAnywhere")
                        .HasColumnType("boolean");

                    b.Property<bool>("SmartDelivery")
                        .HasColumnType("boolean");

                    b.Property<bool>("TransferableProgress")
                        .HasColumnType("boolean");

                    b.Property<bool>("xCloudTouch")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("FeatureListOfGameId")
                        .IsUnique();

                    b.ToTable("FeatureLists");
                });

            modelBuilder.Entity("Tavis.Models.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AchievementCount")
                        .HasColumnType("integer");

                    b.Property<double?>("BaseCompletionEstimate")
                        .HasColumnType("double precision");

                    b.Property<string>("Developer")
                        .HasColumnType("text");

                    b.Property<double?>("FullCompletionEstimate")
                        .HasColumnType("double precision");

                    b.Property<int?>("GamersCompleted")
                        .HasColumnType("integer");

                    b.Property<int?>("GamersWithGame")
                        .HasColumnType("integer");

                    b.Property<int?>("Gamerscore")
                        .HasColumnType("integer");

                    b.Property<double?>("InstallSize")
                        .HasColumnType("double precision");

                    b.Property<string>("Publisher")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ServerClosure")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("SiteRating")
                        .HasColumnType("double precision");

                    b.Property<double?>("SiteRatio")
                        .HasColumnType("double precision");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<int?>("TrueAchievement")
                        .HasColumnType("integer");

                    b.Property<int>("TrueAchievementId")
                        .HasColumnType("integer");

                    b.Property<bool>("Unobtainables")
                        .HasColumnType("boolean");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Tavis.Models.GameGenre", b =>
                {
                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<int>("GenreId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastSync")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("GameId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("GameGenres");
                });

            modelBuilder.Entity("Tavis.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 0,
                            Name = "None"
                        },
                        new
                        {
                            Id = 1,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Sports"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Football"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Third Person Shooter"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Action Horror"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Action-Adventure"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Action-RPG"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Role Playing"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Hack & Slash"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Aerial"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Vehicular Combat"
                        },
                        new
                        {
                            Id = 12,
                            Name = "American Football"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Arcade Racing"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Automobile"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Australian Football"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Baseball"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Basketball"
                        },
                        new
                        {
                            Id = 18,
                            Name = "First Person Shooter"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Battle Royale"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Beat 'em up"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Bowling"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Boxing"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Bull Sports"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Card & Board"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Casino"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Collectable Card Game"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Collection"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 29,
                            Name = "Point & Click"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Cricket"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Cue Sports"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Platformer"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Cycling"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Dance"
                        },
                        new
                        {
                            Id = 35,
                            Name = "Darts"
                        },
                        new
                        {
                            Id = 36,
                            Name = "Dodgeball"
                        },
                        new
                        {
                            Id = 37,
                            Name = "Open World"
                        },
                        new
                        {
                            Id = 38,
                            Name = "Dungeon Crawler"
                        },
                        new
                        {
                            Id = 39,
                            Name = "Educational & Trivia"
                        },
                        new
                        {
                            Id = 40,
                            Name = "Party"
                        },
                        new
                        {
                            Id = 41,
                            Name = "Equestrian Sports"
                        },
                        new
                        {
                            Id = 42,
                            Name = "Fighting"
                        },
                        new
                        {
                            Id = 43,
                            Name = "Fishing"
                        },
                        new
                        {
                            Id = 44,
                            Name = "Golf"
                        },
                        new
                        {
                            Id = 45,
                            Name = "Handball"
                        },
                        new
                        {
                            Id = 46,
                            Name = "Simulation"
                        },
                        new
                        {
                            Id = 47,
                            Name = "Health & Fitness"
                        },
                        new
                        {
                            Id = 48,
                            Name = "Hockey"
                        },
                        new
                        {
                            Id = 49,
                            Name = "Hunting"
                        },
                        new
                        {
                            Id = 50,
                            Name = "Management"
                        },
                        new
                        {
                            Id = 51,
                            Name = "Mech"
                        },
                        new
                        {
                            Id = 52,
                            Name = "Metroidvania"
                        },
                        new
                        {
                            Id = 53,
                            Name = "Mixed Martial Arts"
                        },
                        new
                        {
                            Id = 54,
                            Name = "MMO"
                        },
                        new
                        {
                            Id = 55,
                            Name = "MOBA"
                        },
                        new
                        {
                            Id = 56,
                            Name = "Motocross"
                        },
                        new
                        {
                            Id = 57,
                            Name = "On Rails"
                        },
                        new
                        {
                            Id = 58,
                            Name = "Music"
                        },
                        new
                        {
                            Id = 59,
                            Name = "Naval"
                        },
                        new
                        {
                            Id = 60,
                            Name = "Survival"
                        },
                        new
                        {
                            Id = 61,
                            Name = "Paintball"
                        },
                        new
                        {
                            Id = 62,
                            Name = "Pinball"
                        },
                        new
                        {
                            Id = 63,
                            Name = "Puzzle"
                        },
                        new
                        {
                            Id = 64,
                            Name = "Strategy"
                        },
                        new
                        {
                            Id = 65,
                            Name = "Real Time"
                        },
                        new
                        {
                            Id = 66,
                            Name = "Roguelite"
                        },
                        new
                        {
                            Id = 67,
                            Name = "Rugby"
                        },
                        new
                        {
                            Id = 68,
                            Name = "Run & Gun"
                        },
                        new
                        {
                            Id = 69,
                            Name = "Sandbox"
                        },
                        new
                        {
                            Id = 70,
                            Name = "Shoot 'em up"
                        },
                        new
                        {
                            Id = 71,
                            Name = "Simulation Racing"
                        },
                        new
                        {
                            Id = 72,
                            Name = "Skateboarding"
                        },
                        new
                        {
                            Id = 73,
                            Name = "Skiing"
                        },
                        new
                        {
                            Id = 74,
                            Name = "Snowboarding"
                        },
                        new
                        {
                            Id = 75,
                            Name = "Stealth"
                        },
                        new
                        {
                            Id = 76,
                            Name = "Survival Horror"
                        },
                        new
                        {
                            Id = 77,
                            Name = "Tennis"
                        },
                        new
                        {
                            Id = 78,
                            Name = "Tower Defence"
                        },
                        new
                        {
                            Id = 79,
                            Name = "Visual Novel"
                        },
                        new
                        {
                            Id = 80,
                            Name = "Volleyball"
                        },
                        new
                        {
                            Id = 81,
                            Name = "Wrestling"
                        },
                        new
                        {
                            Id = 82,
                            Name = "Turn Based"
                        },
                        new
                        {
                            Id = 83,
                            Name = "Swimming"
                        },
                        new
                        {
                            Id = 84,
                            Name = "Surfing"
                        },
                        new
                        {
                            Id = 85,
                            Name = "Badminton"
                        },
                        new
                        {
                            Id = 86,
                            Name = "Table Tennis"
                        },
                        new
                        {
                            Id = 87,
                            Name = "Skating"
                        },
                        new
                        {
                            Id = 88,
                            Name = "Lacrosse"
                        },
                        new
                        {
                            Id = 89,
                            Name = "Skydiving"
                        });
                });

            modelBuilder.Entity("Tavis.Models.Login", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Logins");
                });

            modelBuilder.Entity("Tavis.Models.Registration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Registrations");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            EndDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Better Completions Matter",
                            StartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Calendar Project"
                        });
                });

            modelBuilder.Entity("Tavis.Models.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("DiscordId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Tavis.Models.SyncHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("PlayerCount")
                        .HasColumnType("integer");

                    b.Property<int?>("Profile")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Start")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("TaHits")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("SyncHistory");
                });

            modelBuilder.Entity("Tavis.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Area")
                        .HasColumnType("text");

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<string>("Gamertag")
                        .HasColumnType("text");

                    b.Property<string>("Region")
                        .HasColumnType("text");

                    b.Property<string>("Xuid")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Tavis.Models.UserRegistration", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RegistrationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId", "RegistrationId");

                    b.HasIndex("RegistrationId");

                    b.ToTable("UserRegistration");
                });

            modelBuilder.Entity("Tavis.Models.UserRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("TavisApi.Models.BcmMiscStat", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<List<DateTime>>("FullCombos")
                        .HasColumnType("timestamp with time zone[]");

                    b.Property<int?>("LifetimeRgscCompletions")
                        .HasColumnType("integer");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<List<DateTime>>("YearsParticipated")
                        .HasColumnType("timestamp with time zone[]");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("BcmMiscStats");
                });

            modelBuilder.Entity("Tavis.Models.BcmCompletionHistory", b =>
                {
                    b.HasOne("Tavis.Models.Game", "Game")
                        .WithMany("BcmCompletionHistories")
                        .HasForeignKey("GameId");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Tavis.Models.BcmPlayer", b =>
                {
                    b.HasOne("Tavis.Models.User", "User")
                        .WithOne("BcmPlayer")
                        .HasForeignKey("Tavis.Models.BcmPlayer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tavis.Models.BcmPlayerCompletionHistory", b =>
                {
                    b.HasOne("Tavis.Models.BcmPlayer", "BcmPlayer")
                        .WithMany("BcmPlayerCompletionHistories")
                        .HasForeignKey("BcmPlayerId");

                    b.HasOne("Tavis.Models.Game", "Game")
                        .WithMany("PlayerCompletionHistories")
                        .HasForeignKey("GameId");

                    b.Navigation("BcmPlayer");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Tavis.Models.BcmPlayerGame", b =>
                {
                    b.HasOne("Tavis.Models.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tavis.Models.BcmPlayer", "BcmPlayer")
                        .WithMany("BcmPlayerGames")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BcmPlayer");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Tavis.Models.BcmRgsc", b =>
                {
                    b.HasOne("Tavis.Models.BcmPlayer", "BcmPlayer")
                        .WithMany("BcmRgscs")
                        .HasForeignKey("BcmPlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BcmPlayer");
                });

            modelBuilder.Entity("Tavis.Models.BcmStat", b =>
                {
                    b.HasOne("Tavis.Models.BcmPlayer", "BcmPlayer")
                        .WithOne("BcmStats")
                        .HasForeignKey("Tavis.Models.BcmStat", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BcmPlayer");
                });

            modelBuilder.Entity("Tavis.Models.DiscordLogin", b =>
                {
                    b.HasOne("Tavis.Models.User", "User")
                        .WithOne("DiscordLogin")
                        .HasForeignKey("Tavis.Models.DiscordLogin", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tavis.Models.FeatureList", b =>
                {
                    b.HasOne("Tavis.Models.Game", "Game")
                        .WithOne("FeatureList")
                        .HasForeignKey("Tavis.Models.FeatureList", "FeatureListOfGameId");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Tavis.Models.GameGenre", b =>
                {
                    b.HasOne("Tavis.Models.Game", "Game")
                        .WithMany("GameGenres")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tavis.Models.Genre", "Genre")
                        .WithMany("GameGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Tavis.Models.Login", b =>
                {
                    b.HasOne("Tavis.Models.User", "User")
                        .WithOne("Login")
                        .HasForeignKey("Tavis.Models.Login", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tavis.Models.UserRegistration", b =>
                {
                    b.HasOne("Tavis.Models.Registration", "Registration")
                        .WithMany("UserRegistrations")
                        .HasForeignKey("RegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tavis.Models.User", "User")
                        .WithMany("UserRegistrations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Registration");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tavis.Models.UserRole", b =>
                {
                    b.HasOne("Tavis.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tavis.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TavisApi.Models.BcmMiscStat", b =>
                {
                    b.HasOne("Tavis.Models.BcmPlayer", "BcmPlayer")
                        .WithOne("BcmMiscStats")
                        .HasForeignKey("TavisApi.Models.BcmMiscStat", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BcmPlayer");
                });

            modelBuilder.Entity("Tavis.Models.BcmPlayer", b =>
                {
                    b.Navigation("BcmMiscStats");

                    b.Navigation("BcmPlayerCompletionHistories");

                    b.Navigation("BcmPlayerGames");

                    b.Navigation("BcmRgscs");

                    b.Navigation("BcmStats");
                });

            modelBuilder.Entity("Tavis.Models.Game", b =>
                {
                    b.Navigation("BcmCompletionHistories");

                    b.Navigation("FeatureList");

                    b.Navigation("GameGenres");

                    b.Navigation("PlayerCompletionHistories");
                });

            modelBuilder.Entity("Tavis.Models.Genre", b =>
                {
                    b.Navigation("GameGenres");
                });

            modelBuilder.Entity("Tavis.Models.Registration", b =>
                {
                    b.Navigation("UserRegistrations");
                });

            modelBuilder.Entity("Tavis.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Tavis.Models.User", b =>
                {
                    b.Navigation("BcmPlayer");

                    b.Navigation("DiscordLogin");

                    b.Navigation("Login");

                    b.Navigation("UserRegistrations");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
